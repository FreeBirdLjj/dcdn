name: CI

on:
  - push
  - pull_request

permissions:
  contents: read

jobs:
  set-matrix:

    name: set matrix
    runs-on: ubuntu-latest
    strategy:
      matrix:
        data:
          - # shared matrix starts here:
            go-version:
              - "1.24"
    outputs:
      matrix: ${{ toJSON(matrix.data) }}

    steps:
      # `steps` cannot be empty if the job's `uses` is not set
      - run: true

  format:

    name: format
    needs:
      - set-matrix
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJSON(needs.set-matrix.outputs.matrix) }}

    steps:
    - uses: actions/checkout@v5

    - name: Set up Go ${{ matrix.go-version }}
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}

    - name: Format
      run: go fmt ./...

    - name: Fix
      run: go fix ./...

    - name: Vet
      run: go vet ./...

    - name: Check changes
      run: git diff-index --quiet HEAD

  unit-test:

    name: unit test
    needs:
      - set-matrix
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJSON(needs.set-matrix.outputs.matrix) }}

    steps:
      - uses: actions/checkout@v5

      - name: Set up Go ${{ matrix.go-version }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}

      - name: Display Go version
        run: go version

      - name: Install dependencies
        run: go get ./...

      - name: Build
        run: go build -v ./...

      - name: Test
        run: go test -race -v ./...

  docker:

    name: Docker
    needs:
      - unit-test
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    env:
      REGISTRY: ghcr.io
      RELEASE_GO_VERSION: "1.24"

    steps:
      - uses: actions/checkout@v5

      - name: Set up Go ${{ env.RELEASE_GO_VERSION }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.RELEASE_GO_VERSION }}

      - name: Build
        run: |
          mkdir -p release/linux
          # For simplicity, currently only consider archs for which `TARGETVARIANT` is empty.
          for ARCH in amd64 arm64
          do
              CGO_ENABLED=0 GOOS=linux GOARCH=${ARCH} go build -o bin/ ./cmd/...
              cd bin
              tar cf ../release/linux/${ARCH}.tar .
              cd ..
              rm -r bin
          done

      - name: Set image name
        run: |
          echo "IMAGE_NAME=${GITHUB_REPOSITORY,,}" >> $GITHUB_ENV

      - name: Check what needs to be done
        id: need
        env:
          PUSH_DOCKER_IMAGE: ${{ github.event_name == 'push' && github.ref_name == 'main' }}
        run: |
          echo "push_docker_image=$PUSH_DOCKER_IMAGE" >> $GITHUB_OUTPUT

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # set latest tag for default branch
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Log in to the Container registry
        if: ${{ fromJSON(steps.need.outputs.push_docker_image) }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ fromJSON(steps.need.outputs.push_docker_image) }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Generate artifact attestation
        if: ${{ fromJSON(steps.need.outputs.push_docker_image) }}
        uses: actions/attest-build-provenance@v3
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true
